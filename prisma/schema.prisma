// Prisma schema file

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    aadharVerified Boolean   @default(false)
    accounts       Account?
    sessions       Session[]
    aadharNumber   String?   @unique
    will           Will[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Aadhar {
    aadharNumber String @id @unique
    phoneNumber  String @unique
}

model Will {
    id       String         @id @default(cuid())
    bank     BankAccount[]
    fd       FixedDeposit[]
    mf       MutualFunds[]
    shares   Shares[]
    lockers  Lockers[]
    ppf      PPF[]
    property Property[]
    User     User?          @relation(fields: [userId], references: [id])
    userId   String?
}

model BankAccount {
    id       String  @id @default(cuid())
    bankName String
    branch   String
    type     String
    nominee  String
    will     Will?   @relation(fields: [willId], references: [id])
    willId   String?
}

model FixedDeposit {
    id           String  @id @default(cuid())
    companyName  String
    amount       String
    maturitydate String
    nominee      String
    Will         Will?   @relation(fields: [willId], references: [id])
    willId       String?
}

model MutualFunds {
    id        String  @id @default(cuid())
    folioNo   String
    name      String
    applicant String
    nominee   String
    Will      Will?   @relation(fields: [willId], references: [id])
    willId    String?
}

model Shares {
    id       String  @id @default(cuid())
    company  String
    quantity String
    dematAc  String
    nominee  String
    Will     Will?   @relation(fields: [willId], references: [id])
    willId   String?
}

model Lockers {
    id       String  @id @default(cuid())
    bankname String
    branch   String
    accno    String
    rent     String
    nominee  String
    Will     Will?   @relation(fields: [willId], references: [id])
    willId   String?
}

model PPF {
    id           String  @id @default(cuid())
    bankname     String
    accno        String
    maturityDate String
    nominee      String
    Will         Will?   @relation(fields: [willId], references: [id])
    willId       String?
}

model Property {
    id      String  @id @default(cuid())
    address String
    area    String
    pincode String
    city    String
    state   String
    country String
    Will    Will?   @relation(fields: [willId], references: [id])
    willId  String?
}
